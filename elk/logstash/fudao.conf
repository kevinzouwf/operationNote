# ============================================================
# INPUT
# ============================================================
input {
    beats {
        port => 5044
        }

}

filter {
    if [type] =~ ".*_access" {
    	grok {
		match => { "message" => "%{IPV4:frontend_addr} %{USER:ident|-} %{USER:auth|-} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{NOTSPACE:request} (?:HTTP/%{NUMBER:http_version})?|-)\" %{NUMBER:response} (?:%{NUMBER:bytes}) %{NOTSPACE:request_body} %{QS:referrer} \"(?:response\s*%{NOTSPACE:upstream_response_time})\" \"(?:request\s*%{NOTSPACE:request_time})\"%{QS:agent} \"(%{IPV4:clientip}|-)\" \"%{NOTSPACE:http_logid}\" \"%{NOTSPACE:http_trace}\""}
       	 }
	geoip {
    		source => "clientip"
                target => "geoip" 
                add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                database => "/data/soft/logstash_5044/geoip/GeoLite2-City.mmdb" 
         }
	 mutate {
                    convert => { "upstream_response_time" => "float" }
                    convert => { "request_time" => "float" }
                    convert => { "[geoip][coordinates]" => "float" }
         }

	}
# fudao_nginx_error
    if [type] == "fudao_nginx_error" {
	grok {
             match => { "messages" => "(?<message>.*)"}
             }
	}
#-----------------------------------------------------------
#fudao_crm: servicelog
	if [type] =~ ".*servicelog" {
        grok {
              match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{RUBY_LOGLEVEL:loglevel} %{NOTSPACE:application} \{\"response_time\":(?<response_time>%{NUMBER}),\"request_uri\":\"(?<request_uri>.*)\",\"request_header\":(?<request_header>\{.*\}),\"request_body\":(?<request_body>\{.*\}),\"response_body\":(?<response_body>\{.*\})\}"}
             }
	    mutate {
                    convert => { "response_time" => "float" }
                  }
        }
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#requestlog
    if [type] =~ ".*requestlog" {
       grok {    
             match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{RUBY_LOGLEVEL:loglevel} %{NOTSPACE:application} \{\"response_time\":%{BASE10NUM:request_time},\"request_uri\":\"(?<request_uri>.*)\",\"request_header\":(?<request_header>\{.*\}),\"request_body\":(?<request_body>\{.*\}),\"response_body\":(?<response_body>\{.*\})\}"}
	}
	    mutate {
                    convert => { "request_time" => "float" }
                  }
    }
}


output {
       if [type] == "nginx_access" {
	elasticsearch {
                hosts => ['10.9.199.212', '10.9.90.46', '10.9.194.129', '10.9.156.25', '10.9.155.129']
       	 	index => "logstash-nginx_access-%{+YYYY.MM.dd}"
                      }
       }
       if [type] == "nginx_error" {
	elasticsearch {
                hosts => ['10.9.199.212', '10.9.90.46', '10.9.194.129', '10.9.156.25', '10.9.155.129']
       	 	index => "nginx_error-%{+YYYY.MM.dd}"
                      }
       }
       if [type] == "callcenter_requestlog" {
        elasticsearch {
                hosts => ['10.9.199.212', '10.9.90.46', '10.9.194.129', '10.9.156.25', '10.9.155.129']
                index => "callcenter_requestlog-%{+YYYY.MM.dd}"
                      }
       }
       if  [type] =~ ".*_access" and [response]  and [response] not in ['200','301','302','304','400','405'] {
       exec {
          command => "/data/soft/logstash_5044/bin/nginx-50x.py  %{host} %{request} %{message}"
          }
       }
}
